{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to IBBI","text":"<p>Intelligent Bark Beetle Identifier (IBBI) is a Python package that provides a simple and unified interface for detecting and classifying bark and ambrosia beetles from images using state-of-the-art computer vision models.</p> <p>This package is designed to support entomological research by automating the laborious task of beetle identification, enabling high-throughput data analysis for ecological studies, pest management, and biodiversity monitoring.</p> <p></p>"},{"location":"#the-need-for-automation","title":"The Need for Automation","text":"<p>The accurate and timely identification of bark and ambrosia beetle species is fundamental to forest health monitoring and pest management. Many species are morphologically similar, making identification a significant bottleneck that requires highly specialized taxonomic expertise.</p> <p>IBBI addresses this challenge by providing an accessible, programmatic solution that automates the identification process.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Simple API: Access powerful detection and classification models with a single function call: <code>ibbi.create_model()</code>.</li> <li>Pre-trained Models: Leverages pre-trained models hosted on the Hugging Face Hub for immediate use.</li> <li>Extensible: Designed to easily incorporate new model architectures in the future.</li> <li>Research-Focused: Aims to accelerate ecological research by automating beetle identification.</li> </ul> <p>Ready to get started? Check out the Usage Guide.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to IBBI","text":"<p>First off, thank you for considering contributing to IBBI! Your help is greatly appreciated. This document provides guidelines for contributing to the project.</p>"},{"location":"CONTRIBUTING/#how-can-i-contribute","title":"How Can I Contribute?","text":"<p>There are many ways to contribute, from writing tutorials to implementing new models. Here are a few ideas:</p> <ul> <li>Reporting Bugs: If you find a bug, please open an issue on our GitHub issue tracker. Describe the issue in detail, including steps to reproduce it.</li> <li>Suggesting Enhancements: Have an idea for a new feature or an improvement to an existing one? Open an issue to start a discussion.</li> <li>Writing Documentation: Good documentation is key. If you find parts of our docs unclear or want to add a new tutorial, please let us know or submit a pull request.</li> <li>Adding New Models: If you have trained a new model that would be a good fit for IBBI, we'd love to hear about it.</li> <li>Submitting Pull Requests: If you've fixed a bug or implemented a new feature, you can submit a pull request.</li> </ul>"},{"location":"CONTRIBUTING/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>To get started with development, please follow these steps:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone [https://github.com/ChristopherMarais/ibbi.git](https://github.com/ChristopherMarais/ibbi.git)\ncd ibbi\n</code></pre> <ol> <li>Create a Conda environment:     We recommend using Conda to manage your environment.</li> </ol> <pre><code>conda env create -f environment.yml\nconda activate IBBI\n</code></pre> <ol> <li>Install dependencies with Poetry:     This project uses Poetry for dependency management. The <code>environment.yml</code> file sets up Python and pip, and then we use Poetry to install the project dependencies.</li> </ol> <pre><code># Install PyTorch first, ensuring it matches your hardware (CPU/GPU)\n# See [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/) for commands\npip install torch torchvision torchaudio\n\n# Configure Poetry to use the existing Conda environment\npoetry config virtualenvs.create false --local\n\n# Install project dependencies\npoetry install --with dev\n</code></pre> <ol> <li>Set up pre-commit hooks:     We use <code>pre-commit</code> to ensure code quality and consistent formatting.</li> </ol> <pre><code>poetry run pre-commit install\n</code></pre> <pre><code>The hooks will now run automatically every time you make a commit.\n</code></pre>"},{"location":"CONTRIBUTING/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a new branch for your feature or bug fix (e.g., <code>git checkout -b feature/my-new-feature</code>).</li> <li>Make your changes and commit them. Make sure your commit messages are clear and descriptive.</li> <li>Ensure all tests pass and that the pre-commit hooks run without errors.</li> <li>Push your branch to your fork on GitHub.</li> <li>Open a pull request from your branch to the <code>main</code> branch of the IBBI repository.</li> <li>In the pull request description, clearly describe the changes you've made and why. If it fixes an existing issue, please reference it (e.g., \"Fixes #123\").</li> </ol> <p>Thank you again for your interest in contributing!</p>"},{"location":"api/","title":"API Reference","text":"<p>This page provides the auto-generated API documentation for the <code>ibbi</code> package.</p>"},{"location":"api/#ibbi","title":"<code>ibbi</code>","text":"<p>Main initialization file for the ibbi package.</p> <p>This file exposes the primary user-facing function, <code>create_model</code>, which acts as a factory for instantiating various beetle detection and classification models.</p>"},{"location":"api/#ibbi.create_model","title":"<code>create_model(model_name, pretrained=False, **kwargs)</code>","text":"<p>Creates a model from a name.</p> <p>This factory function is the main entry point for users of the package. It looks up the requested model in the registry, downloads pretrained weights from the Hugging Face Hub if requested, and returns an instantiated model object.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model to create.</p> required <code>pretrained</code> <code>bool</code> <p>Whether to load pretrained weights from the Hugging Face Hub.                Defaults to False.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Extra arguments to pass to the model-creating function.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>ModelType</code> <code>ModelType</code> <p>An instance of the requested model (e.g., YOLOv10BeetleDetector or        YOLOv10BeetleClassifier).</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the requested <code>model_name</code> is not found in the model registry.</p> Example <pre><code>import ibbi\n\n# Create a pretrained detection model\ndetector = ibbi.create_model(\"yolov10x_bb_detect_model\", pretrained=True)\n\n# Create a pretrained classification model\nclassifier = ibbi.create_model(\"yolov10x_bb_classify_model\", pretrained=True)\n</code></pre> Source code in <code>src\\ibbi\\__init__.py</code> <pre><code>def create_model(model_name: str, pretrained: bool = False, **kwargs: Any) -&gt; ModelType:\n    \"\"\"\n    Creates a model from a name.\n\n    This factory function is the main entry point for users of the package.\n    It looks up the requested model in the registry, downloads pretrained\n    weights from the Hugging Face Hub if requested, and returns an\n    instantiated model object.\n\n    Args:\n        model_name (str): Name of the model to create.\n        pretrained (bool): Whether to load pretrained weights from the Hugging Face Hub.\n                           Defaults to False.\n        **kwargs (Any): Extra arguments to pass to the model-creating function.\n\n    Returns:\n        ModelType: An instance of the requested model (e.g., YOLOv10BeetleDetector or\n                   YOLOv10BeetleClassifier).\n\n    Raises:\n        KeyError: If the requested `model_name` is not found in the model registry.\n\n    Example:\n        ```python\n        import ibbi\n\n        # Create a pretrained detection model\n        detector = ibbi.create_model(\"yolov10x_bb_detect_model\", pretrained=True)\n\n        # Create a pretrained classification model\n        classifier = ibbi.create_model(\"yolov10x_bb_classify_model\", pretrained=True)\n        ```\n    \"\"\"\n    if model_name not in model_registry:\n        available = \", \".join(model_registry.keys())\n        raise KeyError(f\"Model '{model_name}' not found. Available models: [{available}]\")\n\n    # Look up the factory function in the registry and call it\n    model_factory = model_registry[model_name]\n    model = model_factory(pretrained=pretrained, **kwargs)\n\n    return model\n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide will walk you through the primary functionalities of the <code>ibbi</code> package.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>First, ensure you have PyTorch installed according to the official instructions at pytorch.org. Then, install <code>ibbi</code>:</p> <pre><code>pip install ibbi\n</code></pre>"},{"location":"usage/#basic-usage-detection-and-classification","title":"Basic Usage: Detection and Classification","text":"<p>The core of the package is the <code>ibbi.create_model()</code> function. You can use it to load either an object detection model or a species classification model.</p>"},{"location":"usage/#object-detection","title":"Object Detection","text":"<p>Object detection models are used to find the location (bounding box) of beetles in an image.</p> <pre><code>import ibbi\nfrom PIL import Image\n\n# Load the pretrained object detection model\ndetector = ibbi.create_model(\"yolov10x_bb_detect_model\", pretrained=True)\n\n# Load an image\nimage = Image.open(\"path/to/your/beetle_image.jpg\")\n\n# Get bounding box predictions\nresults = detector.predict(image)\n\n# The 'results' object contains the bounding boxes, scores, and labels.\n# You can plot the results:\nresults[0].show()\n</code></pre>"},{"location":"usage/#species-classification","title":"Species Classification","text":"<p>Classification models are used to predict the species of a beetle in a given image. For best results, these models expect images that are already cropped to the beetle itself.</p> <pre><code>import ibbi\nfrom PIL import Image\n\n# Load the pretrained classification model\nclassifier = ibbi.create_model(\"yolov10x_bb_classify_model\", pretrained=True)\n\n# Load an image of a single beetle\nimage = Image.open(\"path/to/cropped_beetle.jpg\")\n\n# Get species predictions\nresults = classifier.predict(image)\n\n# The 'results' object contains the class probabilities.\n# You can see the top 5 predictions:\nresults[0].show()\nprint(results[0].names[results[0].probs.top5[0]])\n</code></pre>"},{"location":"usage/#advanced-usage-feature-extraction","title":"Advanced Usage: Feature Extraction","text":"<p>Both detector and classifier models can also be used to extract deep features (embeddings) from an image. These feature vectors can be used for other machine learning tasks, such as clustering morphologically similar species or building a visual search engine.</p> <pre><code># Assuming 'classifier' is a loaded model and 'image' is a loaded PIL Image\nfeatures = classifier.extract_features(image)\n\nprint(f\"Extracted feature vector shape: {features.shape}\")\n# Example output: Extracted feature vector shape: torch.Size([1, 768])\n</code></pre> <p>This allows for advanced analyses beyond simple classification.</p>"}]}
